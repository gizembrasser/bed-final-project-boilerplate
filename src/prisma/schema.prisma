// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model User {
  id             String  @id @default(uuid())
  username       String  @unique
  password       String
  name           String
  email          String
  phoneNumber    String
  profilePicture String?

  // 1-to-many relationships
  bookings Booking[]
  reviews  Review[]
}

model Host {
  id             String  @id @default(uuid())
  username       String  @unique
  password       String
  name           String
  email          String
  phoneNumber    String
  profilePicture String?
  aboutMe        String?

  listings Property[]
}

model Property {
  id            String  @id @default(uuid())
  title         String
  description   String
  location      String
  pricePerNight Decimal @db.Decimal(10, 2)
  bedroomCount  Int
  bathRoomCount Int
  maxGuestCount Int
  rating        Int

  // Relations by id
  hostId String

  // Many-to-many relationship between Property and amenities
  amenities Amenity[]

  bookings Booking[]
  reviews  Review[]

  // Reference to the related model
  host Host @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([hostId])
}

model Review {
  id String @id @default(uuid())

  // Relations by id
  userId     String
  propertyId String

  rating  Int
  comment String

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@index([userId])
  @@index([propertyId])
}

model Booking {
  id String @id @default(uuid())

  // Relations by id
  userId     String
  propertyId String

  checkinDate    DateTime
  checkoutDate   DateTime
  numberOfGuests Int
  totalPrice     Decimal  @db.Decimal(10, 2)
  bookingStatus  String

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([propertyId])
}

model Amenity {
  id   String @id @default(uuid())
  name String

  properties Property[]
}
